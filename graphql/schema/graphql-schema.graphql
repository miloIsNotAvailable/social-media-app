#graphql

# The "Query" type is special: it lists all of the available queries that

# clients can execute, along with the return type for each.

# Create a new .graphql file or use an existing one to define your schema.

# Define your schema using the GraphQL schema definition language (SDL) syntax. This includes specifying object types, input types, interfaces, enums, scalars, queries, mutations, and subscriptions.

# Example:

# graphql
# Copy code
# type User {
#   id: ID!
#   name: String!
#   email: String!
# }

# type Query {
#   getUser(id: ID!): User
# }

# type Mutation {
#   createUser(name: String!, email: String!): User!
# }

directive @auth (
  requires: Role = USER
) on OBJECT | FIELD_DEFINITION

# role types
enum Role {
  USER
  UNKNOWN
}

type AuthSuccess {
  token: String
}

type AuthError {
  error: String
}

union Auth = AuthSuccess | AuthError

type User {
  name: String,
  id: String
  email: String,
  communities: [UsersCommunitiesBridge]
}

type Community {
  id: String
  title: String
  description: String
  createdAt: String
  communities: [UsersCommunitiesBridge]
}

type UsersCommunitiesBridge {
    id: String
    users: [User]
    community: [Community]
    user_id: String
    community_id: String
    members: Int
}

type Post {
  id: String
  createdAt: String
  updatedAt: String
  content: String
  title: String   
  author: [User]
  authorId: String
  communityId: String
}

type Query {
  hello: String @auth
  userCommunities( user_id: String! ): [Post] @auth
}

type Mutation {
  signin( email: String!, password: String!, username: String ): Auth
  createCommunity( title: String!, description: String ): Community @auth
  createPost( title: String!, content: String, communityId: String ): Post @auth
}


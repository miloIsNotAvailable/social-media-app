model User {
    id          String      @id @default(uuid())
    createdAt   DateTime    @default(now())
    email       String      @unique
    name        String?
    posts       Post[]
    post        Posts[]
    communities UsersCommunitiesBridge[]
    community   CommunityUsers[]
    liked       Like[]
    like        Likes[]
}

model Comment {
    id           String     @id @default(uuid())
    post_id      String     
    comment_id   String     
    post         Post?      @relation( fields: [ post_id ], references: [ id ] )
}

model Post {
    id           String     @id @default(uuid())
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    content      String?
    flairs       String?
    title        String   
    author       User?      @relation(fields: [authorId], references: [id])
    authorId     String?
    community    Community? @relation(fields: [communityId], references: [id])
    communityId  String?
    communities  UsersCommunitiesBridge[]
    likes        Like[]
    comments     Comment[]
}

// flairs type default=default app flair
// type [community name]=community app flair
model Flairs {
    id           String     @id @default(uuid())
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    // The name of the flair.
    flair_name   String
    // The type of the flair (e.g., default, community).
    type         String
    flairs       PostFlairAssignments[]
}

model PostFlairAssignments {
    // self explanatory
    id           String     @id @default(uuid())
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    // flairs can be assigned to multiple 
    // post flairs
    // and a flair can be assigned once
    // as well as post flairs can have multiple flairs
    // so to avoid duplicating data in flairs
    // post flairs can take multiple flairs
    // for each a record will be created 
    flair        Flairs?    @relation(fields: [flair_id], references: [id])
    flair_id     String?
    post         Posts?     @relation(fields: [post_id], references: [id])
    post_id      String?    
}

// post can have multiple images
// handling multiple image uploads for one post will be 
// handle from the backend
// this can be used for querying by content/title
model PostContent {
    id            String     @id @default(uuid())
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    content       String?
    title         String   
    // post_id must be equal to Posts id
    post          Posts?     @relation(fields: [post_id], references: [id])
    post_id       String?
}

model Posts {
    id             String        @id @default(uuid())
    comment        Boolean       @default(false)
    type           String
    // now when querying posts flairs you'll get all flairs 
    // for the post
    post_flairs    PostFlairAssignments[]
    post_flair_id  String?
    likes          Likes[]
    // details for posts, content date created updated
    details        PostContent[]
    // check for author
    author         User?         @relation(fields: [author_id], references: [id])
    author_id      String?
    // check for community
    community      Community?    @relation(fields: [community_id], references: [id])
    community_id   String?

    communities    Communities?    @relation(fields: [communities_id], references: [id])
    communities_id String?
    // this is for querying for you page etc. multiple communities
    // and posts across one user stuff
    community_users CommunityUsers[]
}

model Likes  {
    id            String      @id @default(uuid())
    post          Posts?      @relation(fields: [post_id], references: [id])
    post_id       String?     @unique
    // get user who liked the post, so later 
    // we can filter by liked posts  
    user          User?       @relation(fields: [user_id], references: [id])
    user_id       String?     @unique
}

model Like  {
    id           String     @id @default(uuid())
    post         Post?      @relation(fields: [postId], references: [id])
    postId       String?  
    user         User?      @relation(fields: [userId], references: [id])
    userId       String?
}

model Community {
    id          String      @id @default(uuid())
    createdAt   DateTime    @default(now())
    title       String      @unique
    description String
    communities UsersCommunitiesBridge[]
    posts Post[]
    post  Posts[]
}

model Communities {
    id               String      @id @default(uuid())
    createdAt        DateTime    @default(now())
    community_name   String
    description      String
    // check for all users in community
    community_users  CommunityUsers[]
    // check for posts in community 
    posts            Posts[]
}

// this tables defines m-n relation
// between users and communities
// only one user can be assigned to one community
// ie. they follow it
model CommunityUsers {
    id           String        @id @default(uuid())
    community    Communities?  @relation(fields: [ community_id ], references: [ id ])
    users        User?         @relation(fields: [ user_id ], references: [ id ])
    posts        Posts?        @relation(fields: [ post_id ], references: [ id ])
    user_id      String
    community_id String
    post_id String
}

model UsersCommunitiesBridge {
    id           String      @id @default(uuid())
    users        User?       @relation(fields: [ user_id ], references: [ id ])
    community    Community?  @relation(fields: [ community_id ], references: [ id ])
    posts        Post?       @relation(fields: [ post_id ], references: [ id ])
    user_id      String
    community_id String
    post_id      String?
}
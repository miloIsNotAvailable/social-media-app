model User {
    id          String      @id @default(uuid())
    createdAt   DateTime    @default(now())
    email       String      @unique
    name        String?
    posts       Post[]
    communities UsersCommunitiesBridge[]
    liked       Like[]
}

model Comment {
    id           String     @id @default(uuid())
    post_id      String     
    post         Post?      @relation( fields: [ post_id ], references: [ id ] )
}

model Post {
    id           String     @id @default(uuid())
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    content      String?
    title        String   
    author       User?      @relation(fields: [authorId], references: [id])
    authorId     String?
    community    Community? @relation(fields: [communityId], references: [id])
    communityId  String?
    communities  UsersCommunitiesBridge[]
    likes        Like[]
    comments     Comment[]
}

model Like  {
    id           String     @id @default(uuid())
    post         Post?      @relation(fields: [postId], references: [id])
    postId       String?  
    user         User?      @relation(fields: [userId], references: [id])
    userId       String?
}

model Community {
    id          String      @id @default(uuid())
    createdAt   DateTime    @default(now())
    title       String      @unique
    description String
    communities UsersCommunitiesBridge[]
    posts Post[]
}

model UsersCommunitiesBridge {
    id           String      @id @default(uuid())
    users        User?       @relation(fields: [ user_id ], references: [ id ])
    community    Community?  @relation(fields: [ community_id ], references: [ id ])
    posts        Post?       @relation(fields: [ post_id ], references: [ id ])
    user_id      String
    community_id String
    post_id      String?
}